name: Build and Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.
jobs:
  tests-and-linting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test
      - name: Install rustfmt
        run: rustup component add rustfmt

      - name: Run rustfmt
        run: cargo fmt -- --check
  build-linux:
    needs: tests-and-linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: x86_64-unknown-linux-gnu
          override: true

      - name: Build for linux
        run:
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare release
        run: |
          cd target/x86_64-unknown-linux-gnu/release
          EVENT_DATA=$(cat "$GITHUB_EVENT_PATH")
          RELEASE_NAME=$(echo "$EVENT_DATA" | jq -r .release.tag_name)
          FILE=libzen_internals_${RELEASE_NAME}_x86_64-unknown-linux-gnu
          sudo tar -czvf ${FILE}.tar.gz libzen_internals.so && sudo rm libzen_internals.so
          sudo touch ${FILE}.tar.gz.sha256sum && sudo chmod 777 ${FILE}.tar.gz.sha256sum
          sudo sha256sum "${FILE}.tar.gz" | cut -d ' ' -f 1 > ${FILE}.tar.gz.sha256sum

      - name: Store the zipfile and shasum
        uses: actions/upload-artifact@v3
        with:
          name: linux-binaries
          path: target/x86_64-unknown-linux-gnu/release/libzen_internals_*
  build-windows:
    needs: tests-and-linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: x86_64-pc-windows-gnu
          override: true

      - name: Build for windows
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y g++-mingw-w64-x86-64
          cargo build --all --release --target x86_64-pc-windows-gnu

      - name: Prepare release
        run: |
          cd target/x86_64-pc-windows-gnu/release
          EVENT_DATA=$(cat "$GITHUB_EVENT_PATH")
          RELEASE_NAME=$(echo "$EVENT_DATA" | jq -r .release.tag_name)
          FILE=libzen_internals_${RELEASE_NAME}_x86_64-pc-windows-gnu.exe
          sudo zip -9r ${FILE}.zip zen_internals.exe && sudo rm zen_internals.exe
          sudo touch ${FILE}.zip.sha256sum && sudo chmod 777 ${FILE}.zip.sha256sum
          sudo sha256sum "${FILE}.zip" | cut -d ' ' -f 1 > ${FILE}.zip.sha256sum

      - name: Store the zipfile and shasum
        uses: actions/upload-artifact@v3
        with:
          name: windows-binaries
          path: target/x86_64-pc-windows-gnu/release/libzen_internals_*

  build-mac:
    needs: tests-and-linting
    runs-on: ubuntu-latest
    outputs:
      sha256sum: ${{ steps.prep.outputs.sha256sum }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          default: true
          override: true

      - name: Build for mac
        run: |
          docker run --rm \
            --volume "${PWD}":/root/src \
            --workdir /root/src \
            joseluisq/rust-linux-darwin-builder:1.81.0 \
            sh -c "CC=o64-clang CXX=o64-clang++ cargo build --release --target x86_64-apple-darwin"

      - id: prep
        name: Prepare release
        run: |
          cd target/x86_64-apple-darwin/release
          EVENT_DATA=$(cat "$GITHUB_EVENT_PATH")
          RELEASE_NAME=$(echo "$EVENT_DATA" | jq -r .release.tag_name)
          FILE=zen_internals_${RELEASE_NAME}_x86_64-apple-darwin
          sudo zip -9r ${FILE}.zip zen_internals && sudo rm zen_internals
          sudo touch ${FILE}.zip.sha256sum && sudo chmod 777 ${FILE}.zip.sha256sum
          CHECKSUM=$(sudo sha256sum "${FILE}.zip" | cut -d ' ' -f 1)
          echo "${CHECKSUM}" > ${FILE}.zip.sha256sum
          printf "::set-output name=%s::%s\n" sha256sum "${CHECKSUM}"

      # Upload artifacts here

  create-github-release:
    needs: [build-mac, build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant write access to contents

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Download Linux binaries
        uses: actions/download-artifact@v3
        with:
          name: linux-binaries
          path: ./artifacts/linux

      - name: Download Windows binaries
        uses: actions/download-artifact@v3
        with:
          name: windows-binaries
          path: ./artifacts/windows

      - name: Upload Linux binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux/*.tar.gz
          asset_name: libzen_internals_linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/*.zip
          asset_name: libzen_internals_windows.zip
          asset_content_type: application/zip