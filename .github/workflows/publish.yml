name: ðŸš€ Build Release Artifacts

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Rust
        run: |
          rustup update --no-self-update stable
          rustup default stable
      - name: Run tests
        run: cargo test

  lint:
    uses: ./.github/workflows/lint.yml

  build:
    needs: [tests, lint]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu.2.17
            runner: ubuntu-22.04
            use_zig: true
            add_target: x86_64-unknown-linux-gnu
            artifact_name: linux-binaries
            lib_name: libzen_internals.so
            output_name: libzen_internals_x86_64-unknown-linux-gnu.so

          - target: x86_64-unknown-linux-musl
            runner: ubuntu-22.04
            use_zig: true
            rustflags: "-C target-feature=-crt-static"
            add_target: x86_64-unknown-linux-musl
            artifact_name: linux-binaries-musl
            lib_name: libzen_internals.so
            output_name: libzen_internals_x86_64-unknown-linux-musl.so

          - target: aarch64-unknown-linux-gnu.2.17
            runner: ubuntu-22.04
            use_zig: true
            add_target: aarch64-unknown-linux-gnu
            artifact_name: linux-binaries-arm64
            lib_name: libzen_internals.so
            output_name: libzen_internals_aarch64-unknown-linux-gnu.so

          - target: aarch64-unknown-linux-musl
            runner: ubuntu-22.04
            use_zig: true
            rustflags: "-C target-feature=-crt-static"
            add_target: aarch64-unknown-linux-musl
            artifact_name: linux-binaries-arm64-musl
            lib_name: libzen_internals.so
            output_name: libzen_internals_aarch64-unknown-linux-musl.so

          - target: x86_64-pc-windows-gnu
            runner: ubuntu-latest
            artifact_name: windows-binaries
            lib_name: zen_internals.dll
            output_name: libzen_internals_x86_64-pc-windows-gnu.dll
            apt_packages: g++-mingw-w64-x86-64

          - target: aarch64-pc-windows-msvc
            runner: windows-latest
            artifact_name: windows-binaries-arm
            lib_name: zen_internals.dll
            output_name: libzen_internals_aarch64-pc-windows-msvc.dll
            use_powershell: true

          - target: x86_64-apple-darwin
            runner: macos-latest
            artifact_name: mac-binaries
            lib_name: libzen_internals.dylib
            output_name: libzen_internals_x86_64-apple-darwin.dylib
            use_shasum: true

          - target: aarch64-apple-darwin
            runner: macos-latest
            artifact_name: mac-binaries-arm64
            lib_name: libzen_internals.dylib
            output_name: libzen_internals_aarch64-apple-darwin.dylib
            use_shasum: true

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ziglang
        if: matrix.use_zig
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5

      - name: Install APT packages
        if: matrix.apt_packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
          ${{ matrix.add_target && format('rustup target add {0}', matrix.add_target) || '' }}
          ${{ matrix.use_zig && 'cargo install --locked cargo-zigbuild' || format('rustup target add {0}', matrix.target) }}

      - name: Build
        run: |
          ${{ matrix.rustflags && format('RUSTFLAGS="{0}"', matrix.rustflags) || '' }} \
          ${{ matrix.use_zig && 'cargo zigbuild' || 'cargo build' }} \
          --target ${{ matrix.target }} --release
        shell: bash

      - name: Prepare release (Unix)
        if: "!matrix.use_powershell"
        run: |
          cd target/${{ matrix.add_target || matrix.target }}/release
          FILE=${{ matrix.output_name }}
          sudo mv ${{ matrix.lib_name }} ${FILE}
          sudo touch ${FILE}.sha256sum && sudo chmod 777 ${FILE}.sha256sum
          ${{ matrix.use_shasum && 'sudo shasum -a 256' || 'sudo sha256sum' }} "${FILE}" > ${FILE}.sha256sum

      - name: Prepare release (PowerShell)
        if: matrix.use_powershell
        shell: pwsh
        run: |
          Set-Location target/${{ matrix.target }}/release
          $FILE = "${{ matrix.output_name }}"
          Move-Item "${{ matrix.lib_name }}" $FILE
          New-Item -ItemType File -Path "$FILE.sha256sum" | Out-Null
          Set-ItemProperty -Path "$FILE.sha256sum" -Name IsReadOnly -Value $false
          Get-FileHash -Algorithm SHA256 -Path $FILE | ForEach-Object { "$($_.Hash.ToLower())  $FILE" } > "$FILE.sha256sum"
          (Get-Content "$FILE.sha256sum") -replace "`r`n", "`n`n" | Set-Content "$FILE.sha256sum" -NoNewline

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            target/${{ matrix.add_target || matrix.target }}/release/${{ matrix.output_name }}
            target/${{ matrix.add_target || matrix.target }}/release/${{ matrix.output_name }}.sha256sum

  build-wasm:
    needs: [tests, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
      - name: Install wasm-pack
        run: cargo install wasm-pack
      - name: Build with wasm-pack
        run: wasm-pack build --target nodejs
      - name: Package and checksum
        run: |
          cd pkg
          tar -czvf zen_internals.tgz zen_internals.js zen_internals.d.ts zen_internals_bg.wasm
          FILE=zen_internals.tgz
          sudo touch ${FILE}.sha256sum && sudo chmod 777 ${FILE}.sha256sum
          sudo sha256sum "${FILE}" > ${FILE}.sha256sum
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-binaries
          path: pkg/zen_internals.tgz*

  upload-release-assets:
    needs: [build, build-wasm]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Upload all assets to release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          files: |
            ./artifacts/linux-binaries/*
            ./artifacts/linux-binaries-musl/*
            ./artifacts/linux-binaries-arm64/*
            ./artifacts/linux-binaries-arm64-musl/*
            ./artifacts/windows-binaries/*
            ./artifacts/windows-binaries-arm/*
            ./artifacts/mac-binaries/*
            ./artifacts/mac-binaries-arm64/*
            ./artifacts/wasm-binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
