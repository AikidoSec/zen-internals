name: ðŸš€ Build Release Artifacts

on:
  release:
    types: [published]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          rustup update --no-self-update stable
          rustup default stable
      - name: Run tests
        run: cargo test
  lint:
    uses: ./.github/workflows/lint.yml

  build-linux:
    needs:
      - tests
      - lint
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ziglang
        uses: mlugg/setup-zig@a67e68dc5c8281d9608136d3d7ca1b282213e4ac # v1

      - name: Install latest rust and cargo-zigbuild
        run: |
          rustup update --no-self-update stable
          rustup default stable
          cargo install --locked cargo-zigbuild

      - name: Build for linux
        run: cargo zigbuild --target x86_64-unknown-linux-gnu.2.17 --release

      - name: Prepare release
        run: |
          cd target/x86_64-unknown-linux-gnu/release
          FILE=libzen_internals_x86_64-unknown-linux-gnu
          sudo mv libzen_internals.so ${FILE}.so
          sudo touch ${FILE}.so.sha256sum && sudo chmod 777 ${FILE}.so.sha256sum
          sudo sha256sum "${FILE}.so" > ${FILE}.so.sha256sum

      - name: Store the .so file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: target/x86_64-unknown-linux-gnu/release/libzen_internals_*

  build-linux-musl:
    needs:
      - tests
      - lint
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ziglang
        uses: mlugg/setup-zig@a67e68dc5c8281d9608136d3d7ca1b282213e4ac # v1

      - name: Install latest rust and cargo-zigbuild
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add x86_64-unknown-linux-musl
          cargo install --locked cargo-zigbuild

      - name: Build for linux
        run: RUSTFLAGS="-C target-feature=-crt-static" cargo zigbuild --target x86_64-unknown-linux-musl --release

      - name: Prepare release
        run: |
          cd target/x86_64-unknown-linux-musl/release
          FILE=libzen_internals_x86_64-unknown-linux-musl
          sudo mv libzen_internals.so ${FILE}.so
          sudo touch ${FILE}.so.sha256sum && sudo chmod 777 ${FILE}.so.sha256sum
          sudo sha256sum "${FILE}.so" > ${FILE}.so.sha256sum

      - name: Store the .so file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-musl
          path: target/x86_64-unknown-linux-musl/release/libzen_internals_*

  build-linux-arm64:
    needs:
      - tests
      - lint
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ziglang
        uses: mlugg/setup-zig@v1

      - name: Install latest rust and cargo-zigbuild
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add aarch64-unknown-linux-gnu
          cargo install --locked cargo-zigbuild

      - name: Build for Linux
        run: |
          cargo zigbuild --target aarch64-unknown-linux-gnu.2.17 --release

      - name: Prepare release
        run: |
          cd target/aarch64-unknown-linux-gnu/release
          FILE=libzen_internals_aarch64-unknown-linux-gnu
          sudo mv libzen_internals.so ${FILE}.so
          sudo touch ${FILE}.so.sha256sum && sudo chmod 777 ${FILE}.so.sha256sum
          sudo sha256sum "${FILE}.so" > ${FILE}.so.sha256sum

      - name: Store the .so file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-arm64
          path: target/aarch64-unknown-linux-gnu/release/libzen_internals_*

  build-linux-arm64-musl:
    needs:
      - tests
      - lint
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ziglang
        uses: mlugg/setup-zig@v1

      - name: Install latest rust and cargo-zigbuild
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add aarch64-unknown-linux-musl
          cargo install --locked cargo-zigbuild

      - name: Build for Linux
        run: |
          RUSTFLAGS="-C target-feature=-crt-static" cargo zigbuild --target aarch64-unknown-linux-musl --release

      - name: Prepare release
        run: |
          cd target/aarch64-unknown-linux-musl/release
          FILE=libzen_internals_aarch64-unknown-linux-musl
          sudo mv libzen_internals.so ${FILE}.so
          sudo touch ${FILE}.so.sha256sum && sudo chmod 777 ${FILE}.so.sha256sum
          sudo sha256sum "${FILE}.so" > ${FILE}.so.sha256sum

      - name: Store the .so file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-arm64-musl
          path: target/aarch64-unknown-linux-musl/release/libzen_internals_*

  build-windows:
    needs:
      - tests
      - lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latest rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add x86_64-pc-windows-gnu

      - name: Build for windows
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y g++-mingw-w64-x86-64
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Prepare release
        run: |
          cd target/x86_64-pc-windows-gnu/release
          FILE=libzen_internals_x86_64-pc-windows-gnu.dll
          sudo mv zen_internals.dll ${FILE}
          sudo touch ${FILE}.sha256sum && sudo chmod 777 ${FILE}.sha256sum
          sudo sha256sum "${FILE}" > ${FILE}.sha256sum

      - name: Store the .dll file and sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: target/x86_64-pc-windows-gnu/release/libzen_internals_*

  build-windows-arm:
    needs:
      - tests
      - lint
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latest rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add aarch64-pc-windows-msvc

      - name: Build for windows arm
        run: cargo build --release --target aarch64-pc-windows-msvc

      - name: Prepare release
        shell: pwsh
        run: |
          Set-Location target/aarch64-pc-windows-msvc/release
          $FILE = "libzen_internals_aarch64-pc-windows-msvc.dll"
          Move-Item "zen_internals.dll" $FILE
          New-Item -ItemType File -Path "$FILE.sha256sum" | Out-Null
          Set-ItemProperty -Path "$FILE.sha256sum" -Name IsReadOnly -Value $false
          # Generate SHA256 checksum and write it in lowercase
          Get-FileHash -Algorithm SHA256 -Path $FILE | ForEach-Object { "$($_.Hash.ToLower())  $FILE" } > "$FILE.sha256sum"
          # Fix line endings
          (Get-Content "$FILE.sha256sum") -replace "`r`n", "`n`n" | Set-Content "$FILE.sha256sum" -NoNewline

      - name: Store the .dll file and sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries-arm
          path: target/aarch64-pc-windows-msvc/release/libzen_internals_*

  build-mac:
    needs:
      - tests
      - lint
    # https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job :
    runs-on: macos-latest
    outputs:
      sha256sum: ${{ steps.prep.outputs.sha256sum }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latest rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add x86_64-apple-darwin

      - name: Build for mac
        run: |
          cargo build --release --target x86_64-apple-darwin
      - id: prep
        name: Prepare release
        run: |
          cd target/x86_64-apple-darwin/release
          FILE=libzen_internals_x86_64-apple-darwin
          sudo mv libzen_internals.dylib ${FILE}.dylib
          sudo touch ${FILE}.dylib.sha256sum && sudo chmod 777 ${FILE}.dylib.sha256sum
          CHECKSUM=$(sudo shasum -a 256 "${FILE}.dylib")
          echo "${CHECKSUM}" > ${FILE}.dylib.sha256sum
          printf "::set-output name=%s::%s\n" sha256sum "${CHECKSUM}"

      - name: Store the .dylib file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: mac-binaries
          path: target/x86_64-apple-darwin/release/libzen_internals_*

  build-mac-arm64:
    needs:
      - tests
      - lint
    # https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job :
    runs-on: macos-latest
    outputs:
      sha256sum: ${{ steps.prep.outputs.sha256sum }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latest rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
          rustup target add aarch64-apple-darwin

      - name: Build for mac
        run: |
          cargo build --release --target aarch64-apple-darwin
      - id: prep
        name: Prepare release
        run: |
          cd target/aarch64-apple-darwin/release
          FILE=libzen_internals_aarch64-apple-darwin
          sudo mv libzen_internals.dylib ${FILE}.dylib
          sudo touch ${FILE}.dylib.sha256sum && sudo chmod 777 ${FILE}.dylib.sha256sum
          CHECKSUM=$(sudo shasum -a 256 "${FILE}.dylib")
          echo "${CHECKSUM}" > ${FILE}.dylib.sha256sum
          printf "::set-output name=%s::%s\n" sha256sum "${CHECKSUM}"

      - name: Store the .dylib file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: mac-binaries-arm64
          path: target/aarch64-apple-darwin/release/libzen_internals_*

  build-wasm:
    needs:
      - tests
      - lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install latest rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup default stable
      - name: Install wasm-pack
        run: cargo install wasm-pack
      - name: Build with wasm-pack
        run: wasm-pack build --target nodejs
      - run: |
          cd pkg
          tar -czvf zen_internals.tgz zen_internals.js zen_internals.d.ts zen_internals_bg.wasm
          FILE=zen_internals.tgz
          sudo touch ${FILE}.sha256sum && sudo chmod 777 ${FILE}.sha256sum
          sudo sha256sum "${FILE}" > ${FILE}.sha256sum
      - name: Store the .tgz file and the sha256sum file
        uses: actions/upload-artifact@v4
        with:
          name: wasm-binaries
          path: pkg/zen_internals.tgz*

  store-artifacts:
    needs:
      [
        build-linux,
        build-linux-arm64,
        build-windows,
        build-mac,
        build-mac-arm64,
        build-windows-arm,
      ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add Linux binary and sha file to release :
      - name: Download Linux binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: ./artifacts/linux
      - name: Upload Linux binary tar
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux/libzen_internals_x86_64-unknown-linux-gnu.so
          asset_name: libzen_internals_x86_64-unknown-linux-gnu.so
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Linux binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux/libzen_internals_x86_64-unknown-linux-gnu.so.sha256sum
          asset_name: libzen_internals_x86_64-unknown-linux-gnu.so.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Linux musl binary and sha file to release :
      - name: Download Linux binaries (musl)
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-musl
          path: ./artifacts/linux-musl
      - name: Upload Linux binary tar
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-musl/libzen_internals_x86_64-unknown-linux-musl.so
          asset_name: libzen_internals_x86_64-unknown-linux-musl.so
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Linux binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-musl/libzen_internals_x86_64-unknown-linux-musl.so.sha256sum
          asset_name: libzen_internals_x86_64-unknown-linux-musl.so.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Linux arm64 binary and sha file to release :
      - name: Download Linux binaries (arm64)
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-arm64
          path: ./artifacts/linux-arm64
      - name: Upload Linux binary tar (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-arm64/libzen_internals_aarch64-unknown-linux-gnu.so
          asset_name: libzen_internals_aarch64-unknown-linux-gnu.so
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Linux binary sha256sum (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-arm64/libzen_internals_aarch64-unknown-linux-gnu.so.sha256sum
          asset_name: libzen_internals_aarch64-unknown-linux-gnu.so.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Linux arm64 musl binary and sha file to release :
      - name: Download Linux binaries (arm64, musl)
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-arm64-musl
          path: ./artifacts/linux-arm64-musl
      - name: Upload Linux binary tar (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-arm64-musl/libzen_internals_aarch64-unknown-linux-musl.so
          asset_name: libzen_internals_aarch64-unknown-linux-musl.so
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Linux binary sha256sum (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/linux-arm64-musl/libzen_internals_aarch64-unknown-linux-musl.so.sha256sum
          asset_name: libzen_internals_aarch64-unknown-linux-musl.so.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Windows binary and sha file to release :
      - name: Download Windows binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: ./artifacts/windows
      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/windows/libzen_internals_x86_64-pc-windows-gnu.dll
          asset_name: libzen_internals_x86_64-pc-windows-gnu.dll
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Windows binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/windows/libzen_internals_x86_64-pc-windows-gnu.dll.sha256sum
          asset_name: libzen_internals_x86_64-pc-windows-gnu.dll.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Windows ARM binary and sha file to release :
      - name: Download Windows ARM binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries-arm
          path: ./artifacts/windows-arm
      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/windows-arm/libzen_internals_aarch64-pc-windows-msvc.dll
          asset_name: libzen_internals_aarch64-pc-windows-msvc.dll
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Windows ARM binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/windows-arm/libzen_internals_aarch64-pc-windows-msvc.dll.sha256sum
          asset_name: libzen_internals_aarch64-pc-windows-msvc.dll.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Mac binary and sha file to release :
      - name: Download Mac OS X binaries
        uses: actions/download-artifact@v4
        with:
          name: mac-binaries
          path: ./artifacts/mac
      - name: Upload Mac OSX binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/mac/libzen_internals_x86_64-apple-darwin.dylib
          asset_name: libzen_internals_x86_64-apple-darwin.dylib
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Mac OSX binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/mac/libzen_internals_x86_64-apple-darwin.dylib.sha256sum
          asset_name: libzen_internals_x86_64-apple-darwin.dylib.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add Mac arm64 binary and sha file to release :
      - name: Download Mac OS X binaries (arm64)
        uses: actions/download-artifact@v4
        with:
          name: mac-binaries-arm64
          path: ./artifacts/mac-arm64
      - name: Upload Mac OSX binary to Release (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/mac-arm64/libzen_internals_aarch64-apple-darwin.dylib
          asset_name: libzen_internals_aarch64-apple-darwin.dylib
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Mac OSX binary sha256sum (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/mac-arm64/libzen_internals_aarch64-apple-darwin.dylib.sha256sum
          asset_name: libzen_internals_aarch64-apple-darwin.dylib.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Add WASM binary and sha file to release :
      - name: Download WASM binaries
        uses: actions/download-artifact@v4
        with:
          name: wasm-binaries
          path: ./artifacts/wasm
      - name: Upload WASM binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/wasm/zen_internals.tgz
          asset_name: zen_internals.tgz
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload WASM binary sha256sum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/wasm/zen_internals.tgz.sha256sum
          asset_name: zen_internals.tgz.sha256sum
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ github.token }}
